# -*- coding: utf-8 -*-
"""Medical_data_Analyser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZDLdgNd_h_eNalEO1HYN2kjSzb_7xkl
"""

import pandas as pd

df=pd.read_csv('/medical_examination.csv')

df.head()

"""Add an overweight column to the data. To determine if a person is overweight, first calculate their BMI by dividing their weight in kilograms by the square of their height in meters. If that value is > 25 then the person is overweight. Use the value 0 for NOT overweight and the value 1 for overweight."""

df['BMI'] = df['weight'] / (df['height'] / 100) ** 2

# Assign 1 to overweight if BMI > 25, else 0
df['overweight'] = (df['BMI'] > 25).astype(int)

df['overweight']

"""Normalize the data by making 0 always good and 1 always bad. If the value of cholesterol or gluc is 1, make the value 0. If the value is more than 1, make the value 1."""

# Normalize cholesterol and gluc columns
df['cholesterol'] = df['cholesterol'].apply(lambda x: 0 if x == 1 else 1)
df['gluc'] = df['gluc'].apply(lambda x: 0 if x == 1 else 1)

df.head()

"""Convert the data into long format and create a chart that shows the value counts of the categorical features using seaborn's catplot(). The dataset should be split by 'Cardio' so there is one chart for each cardio value"""

import seaborn as sns
import matplotlib.pyplot as plt

# Melt the dataframe to long format
df_long = pd.melt(df, id_vars=['cardio'], value_vars=['cholesterol', 'gluc', 'smoke', 'alco', 'active'])

# Create a catplot using seaborn
plt.figure(figsize=(12, 8))
sns.set_theme(style="darkgrid")
chart = sns.catplot(
    x='variable',
    hue='value',
    col='cardio',
    kind='count',
    data=df_long,
    height=6,
    aspect=0.7
)

# Set labels and title
chart.set_axis_labels('Categorical Features', 'Count')
chart.set_titles("Cardio: {col_name}")

# Show the plot
plt.show()

"""Clean the data. Filter out the following patient segments that represent incorrect data:
diastolic pressure is higher than systolic (Keep the correct data with (df['ap_lo'] <= df['ap_hi']))
height is less than the 2.5th percentile (Keep the correct data with (df['height'] >= df['height'].quantile(0.025)))
height is more than the 97.5th percentile
weight is less than the 2.5th percentile
weight is more than the 97.5th percentile
"""

df_cleaned = df[
    (df['ap_lo'] <= df['ap_hi']) &
    (df['height'] >= df['height'].quantile(0.025)) &
    (df['height'] <= df['height'].quantile(0.975)) &
    (df['weight'] >= df['weight'].quantile(0.025)) &
    (df['weight'] <= df['weight'].quantile(0.975))
]

df_cleaned.head()

df.head()

"""Create a correlation matrix using the dataset. Plot the correlation matrix using seaborn's heatmap(). Mask the upper triangle.


"""

import numpy as np

# Create a correlation matrix
correlation_matrix = df.corr()

# Create a mask to hide the upper triangle of the heatmap
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))

# Set up the matplotlib figure
plt.figure(figsize=(12, 8))

# Draw the heatmap with the mask
sns.heatmap(correlation_matrix, mask=mask, cmap='coolwarm', annot=True, fmt=".2f", linewidths=.5)

# Set the title
plt.title('Correlation Matrix')

# Show the plot
plt.show()

