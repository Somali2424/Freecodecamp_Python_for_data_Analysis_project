# -*- coding: utf-8 -*-
"""FCC_Forum_Pageviews.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNIn5F37lkwOkzKZP7KFH9FIhtgnD5-m
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""Use Pandas to import the data from "fcc-forum-pageviews.csv". Set the index to the date column"""

df=pd.read_csv("fcc-forum-pageviews.csv")

"""Clean the data by filtering out days when the page views were in the top 2.5% of the dataset or bottom 2.5% of the dataset[link text](https://)"""

top_threshold = df['value'].quantile(0.975)
bottom_threshold = df['value'].quantile(0.025)

# Filter out the days outside the threshold range
df_cleaned = df[(df['value'] <= top_threshold) & (df['value'] >= bottom_threshold)]

# Display the cleaned dataset
print(df_cleaned)

"""Create a draw_line_plot function that uses Matplotlib to draw a line chart similar to "examples/Figure_1.png". The title should be Daily freeCodeCamp Forum Page Views 5/2016-12/2019. The label on the x axis should be Date and the label on the y axis should be Page Views."""

def draw_line_plot():
    # Load the dataset
    df = pd.read_csv("fcc-forum-pageviews.csv")

    # Convert the date column to datetime format
    df['date'] = pd.to_datetime(df['date'])

    # Set up the figure and axes
    fig, ax = plt.subplots(figsize=(10, 5))

    # Plot the line chart
    ax.plot(df['date'], df['value'], color='r', label='Page Views')

    # Set labels and title
    ax.set_xlabel('Date')
    ax.set_ylabel('Page Views')
    ax.set_title('Daily freeCodeCamp Forum Page Views 5/2016-12/2019')

    # Add legend
    ax.legend()

    # Display the plot
    plt.show()

# Call the function to draw the line plot
draw_line_plot()

def draw_bar_plot():
    # Load the dataset
    df = pd.read_csv("fcc-forum-pageviews.csv")

    # Convert the date column to datetime format
    df['date'] = pd.to_datetime(df['date'])

    # Extract year and month from the date
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month_name()

    # Group by year and month, calculate average page views
    df_grouped = df.groupby(['year', 'month']).mean().reset_index()

    # Pivot the dataframe for better plotting
    df_pivot = df_grouped.pivot(index='year', columns='month', values='value')

    # Set up the figure and axes
    fig, ax = plt.subplots(figsize=(12, 6))

    # Plot the bar chart
    df_pivot.plot(kind='bar', ax=ax)

    # Set labels and title
    ax.set_xlabel('Years')
    ax.set_ylabel('Average Page Views')
    ax.set_title('Average Daily Page Views for Each Month Grouped by Year')

    # Add legend
    ax.legend(title='Months')

    # Display the plot
    plt.show()

# Call the function to draw the bar plot
draw_bar_plot()

import seaborn as sns

def draw_box_plot():
    # Load the dataset
    df = pd.read_csv("fcc-forum-pageviews.csv")

    # Convert the date column to datetime format
    df['date'] = pd.to_datetime(df['date'])

    # Extract year and month from the date
    df['year'] = df['date'].dt.year
    df['month'] = df['date'].dt.month_name()

    # Prepare the data for box plots
    df_box_year = df.copy()
    df_box_year['year'] = df_box_year['date'].dt.year
    df_box_month = df.copy()
    df_box_month['month'] = df_box_month['date'].dt.month_name()

    # Set up the figure and axes
    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 6))

    # Draw the year-wise box plot
    sns.boxplot(x='year', y='value', data=df_box_year, ax=axes[0])
    axes[0].set_xlabel('Year')
    axes[0].set_ylabel('Page Views')
    axes[0].set_title('Year-wise Box Plot (Trend)')

    # Draw the month-wise box plot
    sns.boxplot(x='month', y='value', data=df_box_month, order=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ax=axes[1])
    axes[1].set_xlabel('Month')
    axes[1].set_ylabel('Page Views')
    axes[1].set_title('Month-wise Box Plot (Seasonality)')

    # Adjust layout
    plt.tight_layout()

    # Display the plot
    plt.show()

# Call the function to draw the box plots
draw_box_plot()